Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:custom.prefix}-userPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
      LambdaConfig:
        PostConfirmation: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:custom.prefix}-postConfirmationTrigger

  UserPoolPostConfirmationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:custom.prefix}-postConfirmationTrigger
      SourceArn: !GetAtt UserPool.Arn
    DependsOn: UserPool

  # Cognito User Pool Client
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: ${self:custom.prefix}-user-pool-client
      UserPoolId:
        Ref: UserPool
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - "http://localhost:5000"
      LogoutURLs:
        - "http://localhost:5000/login"
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # Domain for Cognito User Pool for OAuth
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: ${self:custom.prefix}-pool
      UserPoolId:
        Ref: UserPool

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.prefix}-users
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: cognitoUserId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: cognitoUserId-index
          KeySchema:
            - AttributeName: cognitoUserId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  StoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.prefix}-stories
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # S3 Bucket for storing story assets
  StoryAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.prefix}-story-assets
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"
            MaxAge: 3000
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true